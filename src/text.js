// import React, { Component } from 'react'
// import PropTypes from 'prop-types'
// import { connect } from 'react-redux'

// export class text extends Component {
//   static propTypes = {
//     prop: PropTypes
//   }
//   state = {
//     {"hits":[{"created_at":"2014-10-07T17:38:45.000Z","title":"Hacker News API","url":"http://blog.ycombinator.com/hacker-news-api","author":"kevin","points":1715,"story_text":"","comment_text":null,"num_comments":307,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1412703525,"_tags":["story","author_kevin","story_8422599"],"objectID":"8422599","_highlightResult":{"title":{"value":"Hacker \u003cem\u003eNews\u003c/em\u003e API","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"http://blog.ycombinator.com/hacker-\u003cem\u003enews\u003c/em\u003e-api","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"author":{"value":"kevin","matchLevel":"none","matchedWords":[]},"story_text":{"value":"","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-03-13T12:18:31.000Z","title":"Stories that Hacker News removes from the front page","url":"http://sangaline.com/post/the-stories-that-hacker-news-removes-from-the-front-page/","author":"foob","points":1274,"story_text":null,"comment_text":null,"num_comments":313,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1489407511,"_tags":["story","author_foob","story_13857086"],"objectID":"13857086","_highlightResult":{"title":{"value":"Stories that Hacker \u003cem\u003eNews\u003c/em\u003e removes from the front page","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"http://sangaline.com/post/the-stories-that-hacker-\u003cem\u003enews\u003c/em\u003e-removes-from-the-front-page/","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"author":{"value":"foob","matchLevel":"none","matchedWords":[]}}},{"created_at":"2015-04-03T19:36:20.000Z","title":"New Hacker News Guideline: Avoid Gratuitous Negativity","url":"http://blog.ycombinator.com/new-hacker-news-guideline","author":"sama","points":1248,"story_text":null,"comment_text":null,"num_comments":631,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1428089780,"_tags":["story","author_sama","story_9317916"],"objectID":"9317916","_highlightResult":{"title":{"value":"New Hacker \u003cem\u003eNews\u003c/em\u003e Guideline: Avoid Gratuitous Negativity","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"http://blog.ycombinator.com/new-hacker-\u003cem\u003enews\u003c/em\u003e-guideline","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"author":{"value":"sama","matchLevel":"none","matchedWords":[]}}},{"created_at":"2016-06-23T03:34:11.000Z","title":"How a comment on Hacker News led to 4½ new Unicode characters","url":"http://unicodepowersymbol.com/we-did-it-how-a-comment-on-hackernews-lead-to-4-%C2%BD-new-unicode-characters/","author":"adamnemecek","points":1181,"story_text":null,"comment_text":null,"num_comments":413,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1466652851,"_tags":["story","author_adamnemecek","story_11958682"],"objectID":"11958682","_highlightResult":{"title":{"value":"How a comment on Hacker \u003cem\u003eNews\u003c/em\u003e led to 4½ new Unicode characters","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"http://unicodepowersymbol.com/we-did-it-how-a-comment-on-hackernews-lead-to-4-%C2%BD-new-unicode-characters/","matchLevel":"none","matchedWords":[]},"author":{"value":"adamnemecek","matchLevel":"none","matchedWords":[]}}},{"created_at":"2016-01-18T15:03:38.000Z","title":"Top Books on Amazon Based on Links in Hacker News Comments","url":"http://ramiro.org/vis/hn-most-linked-books/","author":"gkst","points":1043,"story_text":null,"comment_text":null,"num_comments":181,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1453129418,"_tags":["story","author_gkst","story_10924741"],"objectID":"10924741","_highlightResult":{"title":{"value":"Top Books on Amazon Based on Links in Hacker \u003cem\u003eNews\u003c/em\u003e Comments","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"http://ramiro.org/vis/hn-most-linked-books/","matchLevel":"none","matchedWords":[]},"author":{"value":"gkst","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-03-08T01:04:16.000Z","title":"Some terrible personal news","url":"https://www.mattcutts.com/blog/cindy-cutts/","author":"rpledge","points":1018,"story_text":null,"comment_text":null,"num_comments":220,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1520471056,"_tags":["story","author_rpledge","story_16541415"],"objectID":"16541415","_highlightResult":{"title":{"value":"Some terrible personal \u003cem\u003enews\u003c/em\u003e","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"https://www.mattcutts.com/blog/cindy-cutts/","matchLevel":"none","matchedWords":[]},"author":{"value":"rpledge","matchLevel":"none","matchedWords":[]}}},{"created_at":"2009-06-03T16:27:07.000Z","title":"How I Hacked Hacker News (with arc security advisory)","url":"","author":"dfranke","points":928,"story_text":"[Condensed version of this narrative: the news.yc code, prior to the\nthe release of arc3, contains a remotely-exploitable vulnerability\npermitting account theft. Anyone running a news installation who has\nnot yet upgraded to arc3 should do so.]\u003cp\u003eHacker News login cookies are random eight-character strings, stored\nserver-side in a hash table mapping them to user names.  I discovered\na few weeks ago that these strings were rather less random than they\nwere meant to be, and, through a delightful combination of exploits,\ncould be predicted, enabling an attacker to steal accounts.\u003cp\u003eHere's the rand-string function from arc.arc, version 2.  It gets\ncalled with n=8 to generate login cookies, and n=10 for the \"fnids\"\nthat get used all over the site as hash keys identifying closures.\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  (def rand-string (n)\n    (with (cap (fn () (+ 65 (rand 26)))\n           sm  (fn () (+ 97 (rand 26)))\n           dig (fn () (+ 48 (rand 10))))\n      (coerce (map [coerce _ 'char]\n                   (cons (rand-choice (cap) (sm))\n                         (n-of (- n 1) (rand-choice (cap) (sm) (dig)))))\n              'string)))\n\u003c/code\u003e\u003c/pre\u003e\nThe first thing you might notice about this function is that not all\ncharacters are equally probable.  Each digit has a 1/30 chance of\noccuring, while each letter has a 1/78 chance.  This alone is no big\ndeal: this distribution means that each character carries 5.826 bits\nof entropy, versus the 5.954 that a uniform distribution would\nprovide.  So for an eight-character string, this bug reduces the\neffective keyspace by just over a factor of two -- not enough to have\nany practical implications.\u003cp\u003eThe 'rand' function is an arc primitive, bound directly to mzscheme's\n'random':\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  ; need to use a better seed\n  (xdef 'rand random)\n\u003c/code\u003e\u003c/pre\u003e\nThe comment seen here is prescient, as we'll see.\u003cp\u003eThis is the C function which implements mzscheme's 'random' function:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  static long sch_int_rand(long n, Scheme_Random_State *rs)\n  {\n    double  x, q, qn, xq;\n\n    /* generate result in {0..n-1} using the rejection method */\n    q  = (double)( (unsigned long)(m1 / (double)n) );\n    qn = q * n;\n    do {\n      x = mrg32k3a(rs);\n    } while (x \u0026#62;= qn);\n    xq = x / q;\n\n    /* return result */\n    return (long)xq;\n  }\n\u003c/code\u003e\u003c/pre\u003e\nWhere mrg32k3a() is:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  static double mrg32k3a(Scheme_Random_State *s) { /*(double), in {0..m1-1}*/\n    double x10, x20, y;\n    long   k10, k20;\n\n    /* component 1 */\n    x10  = a12*(s-\u0026#62;x11) - a13n*(s-\u0026#62;x12);\n    k10  = (long)(x10 / m1);\n    x10 -= k10 * m1;\n    if (x10 \u0026#60; 0.0)\n      x10 += m1;\n    s-\u0026#62;x12 = s-\u0026#62;x11;\n    s-\u0026#62;x11 = s-\u0026#62;x10;\n    s-\u0026#62;x10 = x10;\n\n    /* component 2 */\n    x20  = a21*(s-\u0026#62;x20) - a23n*(s-\u0026#62;x22);\n    k20  = (long)(x20 / m2);\n    x20 -= k20 * m2;\n    if (x20 \u0026#60; 0.0)\n      x20 += m2;\n    s-\u0026#62;x22 = s-\u0026#62;x21;\n    s-\u0026#62;x21 = s-\u0026#62;x20;\n    s-\u0026#62;x20 = x20;\n\n    /* combination of component */\n    y = x10 - x20;\n    if (y \u0026#60; 0.0)\n      y += m1;\n    return y;\n  }\n\u003c/code\u003e\u003c/pre\u003e\nThis, obviously, is not a cryptographically strong PRNG.  Is it possible\nthat we could break it, computing its internal state by seeing a few\nconsecutively-generated rand-strings?  Probably: it looks as though it\ncould be represented as the solution to a manageable system of diophantine\nequations.  That, though, was more math than I felt like doing, so I went\nlooking for an easier approach.\u003cp\u003eWhere does the RNG seed come from?  Ah ha:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  rs = scheme_make_random_state(scheme_get_milliseconds());\n\u003c/code\u003e\u003c/pre\u003e\nWhere scheme_get_milliseconds is defined, after eliding some\npreprocessor cruft, as:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  long scheme_get_milliseconds(void)\n  {\n    struct timeb now;\n    ftime(\u0026#38;now);\n    return now.time * 1000 + now.millitm;\n  }\n\u003c/code\u003e\u003c/pre\u003e\nIn other words, the random seed is merely the number of milliseconds\nsince epoch at the time the seed function was called.\u003cp\u003eThe part of mzscheme that calls the seed function is a bit daunting:\nit appears that in some cases, the PRNG state can be thread-local and\nbe initialized when the thread is spawned.  However, instrumenting\nsch_int_rand() with some debug output showed that in arc, the same\nstate vector gets used everywhere, and is initialized when the\nmzscheme runtime starts up.\u003cp\u003eThe millisecond at which news.yc last started is not an immediately\nsimple thing to determine, though it was at least easy to verify the\nsanity of the system clock, thanks to an open NTP serevr:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  dfranke@feanor:~$ sudo ntpdate -q news.ycombinator.com\n  server 174.132.225.106, stratum 2, offset 0.370866, delay 0.08228\n  17 May 01:45:13 ntpdate[27901]: adjust time server 174.132.225.106 offset 0.370866 sec\n\u003c/code\u003e\u003c/pre\u003e\nSo for a start, I thought, perhaps I could determine the server's\nstart time to within a few seconds or minutes.  A boring way to go\nabout this would be simply to monitor the server for downtime, and\nrecord when it became accessible again.  But impatience is one of the\nthree great programmer's virtues, and the best way to predict the future\nis to create it, and so forth, so I decided on a more proactive\napproach: crash it!\u003cp\u003eA couple months ago, PG left this comment after news.yc recovered from\nsome downtime:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  HN was down today for around 2 hours. Sorry about that.\n\n  The News server currently crashes a couple times a day when it runs\n  out of memory. All the comments and stories no longer fit in the 2 GB\n  we can get on a 32 bit machine. We'd been planning to upgrade to a new\n  64 bit server. In the meantime it was arguably a rather slow form of\n  GC.\n\n  Unfortunately the process somehow got wedged in the middle of\n  segfaulting. We're not sure why and will probably never know. But that\n  meant the process that usually notices when News is wedged and\n  restarts it was unable to kill it.\n\u003c/code\u003e\u003c/pre\u003e\n(The server had since been upgraded, so these crashes are/were no longer\nhappening.)\u003cp\u003eI figured that the watchdog works by requesting a page and checking to\nmake sure it gets a response, and that if it doesn't get one, then it\nassumes the server is wedged and restarts it.\u003cp\u003eHere's arc2's top-level request handler:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  (= srvthreads* nil threadlimit* 50 threadlife* 30)\n\n  ; Could auto-throttle ips, e.g. if one has more than x% of recent requests.\n  (= requests* 0 requests/ip* (table) throttle-ips* (table) throttle-time* 30)\n\n  (def handle-request (s (o life threadlife*))\n    (if (len\u0026#60; (pull dead srvthreads*) threadlimit*)\n        (let (i o ip) (socket-accept s)\n          (++ requests*)\n          (= (requests/ip* ip) (+ 1 (or (requests/ip* ip) 0)))\n          (let th (thread \n                    (if (throttle-ips* ip) (sleep (rand throttle-time*)))\n                    (handle-request-thread i o ip))\n            (push th srvthreads*)\n            (thread (sleep life)\n                    (unless (dead th) (prn \"srv thread took too long\"))\n                    (break-thread th)\n                    (close i o))))\n        (sleep .2)))\n\u003c/code\u003e\u003c/pre\u003e\nSo, there's a limit of 50 concurrent threads, and threads are killed\nafter 30 seconds if they haven't already terminated.  So if I were to\nhold open 50 concurrent connections, and the watchdog were to run during\nthe following 30 seconds, then the server ought to restart.\u003cp\u003eThe watchdog code has not been released, so rather than soil my hat\ncolor by DoSing the production server, I decided to continue hacking\non my local install on the assumption that I had the ability to\ndetermine the server's start time to within one minute.\u003cp\u003eSo, a one-minute interval is 60,000 possible PRNG seeds.  If I kept\npolling to see when the server came back up after the watchdog killed\nit, then let's very conservatively assume that I could be among the\nfirst 50 people to issue an HTTP request.  Each page that comes back\nfrom the server typically contains 2-3 fnids, so the reply I got would\ncontain some from among first few hundred to be generated, and thus\nfrom among the first few thousand iterations of of the PRNG.\u003cp\u003eThis leaves determination of the PRNG seed comfortably within the\nreach of brute force: run the PRNG for 10,000 iterations for each of\nthe 60,000 possible seeds, and see which one produces the fnids I saw\nin response to my request.  I wrote a program that does just this:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  http://dfranke.us/hacknews.c\n\u003c/code\u003e\u003c/pre\u003e\nSo now I was able to determine PRNG seeds, but I couldn't conclude my\nadventure quite yet.  Since logging into news.yc is an uncommon\noperation compared to simply browsing around, only a tiny fraction of\nrand-strings that the server generates correspond to login cookies.\nFurthermore, since fnids and login cookies have different lengths, and\nsince the PRNG gets called for a few other purposes at unpredictable\ntimes, every individual PRNG iteration begins a candidate login\ncookie.  That's 40 or more false candidates produced for every page\nview.\u003cp\u003eNonetheless, online brute force would still be manageable.  If each\npage view produces an average of 50 candidates, and one in every\nthousand page views is a login (this might be slightly optimistic),\nthat's 50,000 attempts necessary in order to find a working login.  HN\ngets about 500,000 hits on a busy day, so this could be done in a day\nor two while likely staying under the radar.\u003cp\u003eA marginally more efficient approach would be a bit of social engineering:\u003cp\u003e1. Request a page.  Find a generated fnid from the page source and\nlook it up in our candidate list.  Call this A.\u003cp\u003e2. \n  ERC\u0026#62; /join #startups   \n        \u0026#60;dfranke\u0026#62; Hey guys, I haven't been able to log in to news.yc\n                  since the server restarted a little while ago.  Anyone \n                  else having problems?\n        \u0026#60;jrandomsucker\u0026#62; dfranke: Works for me.\n        \u0026#60;dfranke\u0026#62; Hmm, weird.  I'll just try again later I guess.\u003cp\u003e3. Request another page, note the fnid, find it in the candidate\nlist.  Call this B.\u003cp\u003eStep 4: Test the cookies that fall between A and B.\u003cp\u003eIf this conversation takes one minute, then this reduces the search to\nabout 17,500 attempts -- less than a day's worth at a modest rate of\nquerying -- and possibly picks up multiple accounts in the process.\u003cp\u003eEpilogue:\u003cp\u003eI sent PG a draft of this post.  RTM and I wrote a better implementation\nof rand-string which reads from /dev/urandom and obeys a proper uniform\ndistribution.  This new version appears in arc3:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  (def rand-string (n)\n    (let c \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n      (with (nc 62 s (newstring n) i 0)\n        (w/infile str \"/dev/urandom\"\n          (while (\u0026#60; i n)\n            (let x (readb str)\n               (unless (\u0026#62; x 247)\n                 (= (s i) (c (mod x nc)))\n                 (++ i)))))\n        s)))\n\u003c/code\u003e\u003c/pre\u003e\nPG removed the 50-thread concurrency limit and replaced it with a\nper-IP rate limiter, so the DoS attack described here should no longer\nwork.","comment_text":null,"num_comments":78,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1244046427,"_tags":["story","author_dfranke","story_639976"],"objectID":"639976","_highlightResult":{"title":{"value":"How I Hacked Hacker \u003cem\u003eNews\u003c/em\u003e (with arc security advisory)","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"","matchLevel":"none","matchedWords":[]},"author":{"value":"dfranke","matchLevel":"none","matchedWords":[]},"story_text":{"value":"[Condensed version of this narrative: the \u003cem\u003enews\u003c/em\u003e.yc code, prior to the\nthe release of arc3, contains a remotely-exploitable vulnerability\npermitting account theft. Anyone running a \u003cem\u003enews\u003c/em\u003e installation who has\nnot yet upgraded to arc3 should do so.]\u003cp\u003eHacker \u003cem\u003eNews\u003c/em\u003e login cookies are random eight-character strings, stored\nserver-side in a hash table mapping them to user names.  I discovered\na few weeks ago that these strings were rather less random than they\nwere meant to be, and, through a delightful combination of exploits,\ncould be predicted, enabling an attacker to steal accounts.\u003cp\u003eHere's the rand-string function from arc.arc, version 2.  It gets\ncalled with n=8 to generate login cookies, and n=10 for the \"fnids\"\nthat get used all over the site as hash keys identifying closures.\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  (def rand-string (n)\n    (with (cap (fn () (+ 65 (rand 26)))\n           sm  (fn () (+ 97 (rand 26)))\n           dig (fn () (+ 48 (rand 10))))\n      (coerce (map [coerce _ 'char]\n                   (cons (rand-choice (cap) (sm))\n                         (n-of (- n 1) (rand-choice (cap) (sm) (dig)))))\n              'string)))\n\u003c/code\u003e\u003c/pre\u003e\nThe first thing you might notice about this function is that not all\ncharacters are equally probable.  Each digit has a 1/30 chance of\noccuring, while each letter has a 1/78 chance.  This alone is no big\ndeal: this distribution means that each character carries 5.826 bits\nof entropy, versus the 5.954 that a uniform distribution would\nprovide.  So for an eight-character string, this bug reduces the\neffective keyspace by just over a factor of two -- not enough to have\nany practical implications.\u003cp\u003eThe 'rand' function is an arc primitive, bound directly to mzscheme's\n'random':\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  ; need to use a better seed\n  (xdef 'rand random)\n\u003c/code\u003e\u003c/pre\u003e\nThe comment seen here is prescient, as we'll see.\u003cp\u003eThis is the C function which implements mzscheme's 'random' function:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  static long sch_int_rand(long n, Scheme_Random_State *rs)\n  {\n    double  x, q, qn, xq;\n\n    /* generate result in {0..n-1} using the rejection method */\n    q  = (double)( (unsigned long)(m1 / (double)n) );\n    qn = q * n;\n    do {\n      x = mrg32k3a(rs);\n    } while (x \u003e= qn);\n    xq = x / q;\n\n    /* return result */\n    return (long)xq;\n  }\n\u003c/code\u003e\u003c/pre\u003e\nWhere mrg32k3a() is:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  static double mrg32k3a(Scheme_Random_State *s) { /*(double), in {0..m1-1}*/\n    double x10, x20, y;\n    long   k10, k20;\n\n    /* component 1 */\n    x10  = a12*(s-\u003ex11) - a13n*(s-\u003ex12);\n    k10  = (long)(x10 / m1);\n    x10 -= k10 * m1;\n    if (x10 \u003c 0.0)\n      x10 += m1;\n    s-\u003ex12 = s-\u003ex11;\n    s-\u003ex11 = s-\u003ex10;\n    s-\u003ex10 = x10;\n\n    /* component 2 */\n    x20  = a21*(s-\u003ex20) - a23n*(s-\u003ex22);\n    k20  = (long)(x20 / m2);\n    x20 -= k20 * m2;\n    if (x20 \u003c 0.0)\n      x20 += m2;\n    s-\u003ex22 = s-\u003ex21;\n    s-\u003ex21 = s-\u003ex20;\n    s-\u003ex20 = x20;\n\n    /* combination of component */\n    y = x10 - x20;\n    if (y \u003c 0.0)\n      y += m1;\n    return y;\n  }\n\u003c/code\u003e\u003c/pre\u003e\nThis, obviously, is not a cryptographically strong PRNG.  Is it possible\nthat we could break it, computing its internal state by seeing a few\nconsecutively-generated rand-strings?  Probably: it looks as though it\ncould be represented as the solution to a manageable system of diophantine\nequations.  That, though, was more math than I felt like doing, so I went\nlooking for an easier approach.\u003cp\u003eWhere does the RNG seed come from?  Ah ha:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  rs = scheme_make_random_state(scheme_get_milliseconds());\n\u003c/code\u003e\u003c/pre\u003e\nWhere scheme_get_milliseconds is defined, after eliding some\npreprocessor cruft, as:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  long scheme_get_milliseconds(void)\n  {\n    struct timeb now;\n    ftime(\u0026now);\n    return now.time * 1000 + now.millitm;\n  }\n\u003c/code\u003e\u003c/pre\u003e\nIn other words, the random seed is merely the number of milliseconds\nsince epoch at the time the seed function was called.\u003cp\u003eThe part of mzscheme that calls the seed function is a bit daunting:\nit appears that in some cases, the PRNG state can be thread-local and\nbe initialized when the thread is spawned.  However, instrumenting\nsch_int_rand() with some debug output showed that in arc, the same\nstate vector gets used everywhere, and is initialized when the\nmzscheme runtime starts up.\u003cp\u003eThe millisecond at which \u003cem\u003enews\u003c/em\u003e.yc last started is not an immediately\nsimple thing to determine, though it was at least easy to verify the\nsanity of the system clock, thanks to an open NTP serevr:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  dfranke@feanor:~$ sudo ntpdate -q \u003cem\u003enews\u003c/em\u003e.ycombinator.com\n  server 174.132.225.106, stratum 2, offset 0.370866, delay 0.08228\n  17 May 01:45:13 ntpdate[27901]: adjust time server 174.132.225.106 offset 0.370866 sec\n\u003c/code\u003e\u003c/pre\u003e\nSo for a start, I thought, perhaps I could determine the server's\nstart time to within a few seconds or minutes.  A boring way to go\nabout this would be simply to monitor the server for downtime, and\nrecord when it became accessible again.  But impatience is one of the\nthree great programmer's virtues, and the best way to predict the future\nis to create it, and so forth, so I decided on a more proactive\napproach: crash it!\u003cp\u003eA couple months ago, PG left this comment after \u003cem\u003enews\u003c/em\u003e.yc recovered from\nsome downtime:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  HN was down today for around 2 hours. Sorry about that.\n\n  The \u003cem\u003eNews\u003c/em\u003e server currently crashes a couple times a day when it runs\n  out of memory. All the comments and stories no longer fit in the 2 GB\n  we can get on a 32 bit machine. We'd been planning to upgrade to a new\n  64 bit server. In the meantime it was arguably a rather slow form of\n  GC.\n\n  Unfortunately the process somehow got wedged in the middle of\n  segfaulting. We're not sure why and will probably never know. But that\n  meant the process that usually notices when \u003cem\u003eNews\u003c/em\u003e is wedged and\n  restarts it was unable to kill it.\n\u003c/code\u003e\u003c/pre\u003e\n(The server had since been upgraded, so these crashes are/were no longer\nhappening.)\u003cp\u003eI figured that the watchdog works by requesting a page and checking to\nmake sure it gets a response, and that if it doesn't get one, then it\nassumes the server is wedged and restarts it.\u003cp\u003eHere's arc2's top-level request handler:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  (= srvthreads* nil threadlimit* 50 threadlife* 30)\n\n  ; Could auto-throttle ips, e.g. if one has more than x% of recent requests.\n  (= requests* 0 requests/ip* (table) throttle-ips* (table) throttle-time* 30)\n\n  (def handle-request (s (o life threadlife*))\n    (if (len\u003c (pull dead srvthreads*) threadlimit*)\n        (let (i o ip) (socket-accept s)\n          (++ requests*)\n          (= (requests/ip* ip) (+ 1 (or (requests/ip* ip) 0)))\n          (let th (thread \n                    (if (throttle-ips* ip) (sleep (rand throttle-time*)))\n                    (handle-request-thread i o ip))\n            (push th srvthreads*)\n            (thread (sleep life)\n                    (unless (dead th) (prn \"srv thread took too long\"))\n                    (break-thread th)\n                    (close i o))))\n        (sleep .2)))\n\u003c/code\u003e\u003c/pre\u003e\nSo, there's a limit of 50 concurrent threads, and threads are killed\nafter 30 seconds if they haven't already terminated.  So if I were to\nhold open 50 concurrent connections, and the watchdog were to run during\nthe following 30 seconds, then the server ought to restart.\u003cp\u003eThe watchdog code has not been released, so rather than soil my hat\ncolor by DoSing the production server, I decided to continue hacking\non my local install on the assumption that I had the ability to\ndetermine the server's start time to within one minute.\u003cp\u003eSo, a one-minute interval is 60,000 possible PRNG seeds.  If I kept\npolling to see when the server came back up after the watchdog killed\nit, then let's very conservatively assume that I could be among the\nfirst 50 people to issue an HTTP request.  Each page that comes back\nfrom the server typically contains 2-3 fnids, so the reply I got would\ncontain some from among first few hundred to be generated, and thus\nfrom among the first few thousand iterations of of the PRNG.\u003cp\u003eThis leaves determination of the PRNG seed comfortably within the\nreach of brute force: run the PRNG for 10,000 iterations for each of\nthe 60,000 possible seeds, and see which one produces the fnids I saw\nin response to my request.  I wrote a program that does just this:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  http://dfranke.us/hacknews.c\n\u003c/code\u003e\u003c/pre\u003e\nSo now I was able to determine PRNG seeds, but I couldn't conclude my\nadventure quite yet.  Since logging into \u003cem\u003enews\u003c/em\u003e.yc is an uncommon\noperation compared to simply browsing around, only a tiny fraction of\nrand-strings that the server generates correspond to login cookies.\nFurthermore, since fnids and login cookies have different lengths, and\nsince the PRNG gets called for a few other purposes at unpredictable\ntimes, every individual PRNG iteration begins a candidate login\ncookie.  That's 40 or more false candidates produced for every page\nview.\u003cp\u003eNonetheless, online brute force would still be manageable.  If each\npage view produces an average of 50 candidates, and one in every\nthousand page views is a login (this might be slightly optimistic),\nthat's 50,000 attempts necessary in order to find a working login.  HN\ngets about 500,000 hits on a busy day, so this could be done in a day\nor two while likely staying under the radar.\u003cp\u003eA marginally more efficient approach would be a bit of social engineering:\u003cp\u003e1. Request a page.  Find a generated fnid from the page source and\nlook it up in our candidate list.  Call this A.\u003cp\u003e2. \n  ERC\u003e /join #startups   \n        \u003cdfranke\u003e Hey guys, I haven't been able to log in to \u003cem\u003enews\u003c/em\u003e.yc\n                  since the server restarted a little while ago.  Anyone \n                  else having problems?\n        \u003cjrandomsucker\u003e dfranke: Works for me.\n        \u003cdfranke\u003e Hmm, weird.  I'll just try again later I guess.\u003cp\u003e3. Request another page, note the fnid, find it in the candidate\nlist.  Call this B.\u003cp\u003eStep 4: Test the cookies that fall between A and B.\u003cp\u003eIf this conversation takes one minute, then this reduces the search to\nabout 17,500 attempts -- less than a day's worth at a modest rate of\nquerying -- and possibly picks up multiple accounts in the process.\u003cp\u003eEpilogue:\u003cp\u003eI sent PG a draft of this post.  RTM and I wrote a better implementation\nof rand-string which reads from /dev/urandom and obeys a proper uniform\ndistribution.  This new version appears in arc3:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  (def rand-string (n)\n    (let c \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n      (with (nc 62 s (\u003cem\u003enews\u003c/em\u003etring n) i 0)\n        (w/infile str \"/dev/urandom\"\n          (while (\u003c i n)\n            (let x (readb str)\n               (unless (\u003e x 247)\n                 (= (s i) (c (mod x nc)))\n                 (++ i)))))\n        s)))\n\u003c/code\u003e\u003c/pre\u003e\nPG removed the 50-thread concurrency limit and replaced it with a\nper-IP rate limiter, so the DoS attack described here should no longer\nwork.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]}}},{"created_at":"2016-12-11T21:51:28.000Z","title":"Things You Notice When You Quit the News","url":"http://www.raptitude.com/2016/12/five-things-you-notice-when-you-quit-the-news/","author":"ysarbabi","points":891,"story_text":null,"comment_text":null,"num_comments":487,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1481493088,"_tags":["story","author_ysarbabi","story_13153539"],"objectID":"13153539","_highlightResult":{"title":{"value":"Things You Notice When You Quit the \u003cem\u003eNews\u003c/em\u003e","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"http://www.raptitude.com/2016/12/five-things-you-notice-when-you-quit-the-\u003cem\u003enews\u003c/em\u003e/","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"author":{"value":"ysarbabi","matchLevel":"none","matchedWords":[]}}},{"created_at":"2013-11-26T08:15:49.000Z","title":"How Hacker News ranking really works: scoring, controversy, and penalties","url":"http://www.righto.com/2013/11/how-hacker-news-ranking-really-works.html","author":"jseip","points":871,"story_text":"","comment_text":null,"num_comments":190,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1385453749,"_tags":["story","author_jseip","story_6799854"],"objectID":"6799854","_highlightResult":{"title":{"value":"How Hacker \u003cem\u003eNews\u003c/em\u003e ranking really works: scoring, controversy, and penalties","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"http://www.righto.com/2013/11/how-hacker-\u003cem\u003enews\u003c/em\u003e-ranking-really-works.html","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"author":{"value":"jseip","matchLevel":"none","matchedWords":[]},"story_text":{"value":"","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-02-23T00:11:29.000Z","title":"Show HN: Hacker News Classics","url":"http://jsomers.net/hn","author":"jsomers","points":864,"story_text":null,"comment_text":null,"num_comments":78,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1519344689,"_tags":["story","author_jsomers","story_16442888","show_hn"],"objectID":"16442888","_highlightResult":{"title":{"value":"Show HN: Hacker \u003cem\u003eNews\u003c/em\u003e Classics","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"http://jsomers.net/hn","matchLevel":"none","matchedWords":[]},"author":{"value":"jsomers","matchLevel":"none","matchedWords":[]}}},{"created_at":"2012-08-17T15:14:24.000Z","title":"Why I now, unfortunately, hate Hacker News..","url":"","author":"sw007","points":842,"story_text":"I joined Hacker News around 5 years ago. I used to wake up and do the grim commute each morning to London from my home and the only thing that made it vaguely ok was Hacker News. It was a great place to go and find interesting articles from genuinely passionate people. It also used to be a really safe place to launch a startup that you'd spent days, weeks, years on - your project. It was a place where you could launch your startup and know you'd get great constructive feedback. People may not necessarily like your site but they'd admire you for having the balls to launch it, for spending time developing something that you hoped could benefit people in some way. They'd want you to succeed and they'd try and help you succeed with feedback that would ultimately help you. Unfortunately, today's Hacker News audience is no longer the same.\nToday's Hacker News is a place where users want to snipe at other users and find negative aspects to anything thing submitted. No longer does someone say 'This and this I like but this needs work'. Oh no, now the response is 'Hate this, hate that, this is pointless.'. Hacker News now is about correcting grammar and points scoring. It is pointing out anything negative at all that anyone has done, has said. It is no longer a safe place. It has fast become an acidic forum.\u003cp\u003eI've launched 2 projects (11kclub and Favilous) on here over the last year - both got a similar response. There was nothing constructive, it was just sniping - they saw someone had put themselves up there and they just shot them down. It's a real shame. I hope one day the site returns with the kind of audience it once had. Until that happens, I won't be going on my favourite site anymore - the commute just got a whole lot longer.\u003cp\u003eFor now I wish you all the best...\u003cp\u003eThanks\u003cp\u003eSteve","comment_text":null,"num_comments":449,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1345216464,"_tags":["story","author_sw007","story_4396747"],"objectID":"4396747","_highlightResult":{"title":{"value":"Why I now, unfortunately, hate Hacker \u003cem\u003eNews\u003c/em\u003e..","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"","matchLevel":"none","matchedWords":[]},"author":{"value":"sw007","matchLevel":"none","matchedWords":[]},"story_text":{"value":"I joined Hacker \u003cem\u003eNews\u003c/em\u003e around 5 years ago. I used to wake up and do the grim commute each morning to London from my home and the only thing that made it vaguely ok was Hacker \u003cem\u003eNews\u003c/em\u003e. It was a great place to go and find interesting articles from genuinely passionate people. It also used to be a really safe place to launch a startup that you'd spent days, weeks, years on - your project. It was a place where you could launch your startup and know you'd get great constructive feedback. People may not necessarily like your site but they'd admire you for having the balls to launch it, for spending time developing something that you hoped could benefit people in some way. They'd want you to succeed and they'd try and help you succeed with feedback that would ultimately help you. Unfortunately, today's Hacker \u003cem\u003eNews\u003c/em\u003e audience is no longer the same.\nToday's Hacker \u003cem\u003eNews\u003c/em\u003e is a place where users want to snipe at other users and find negative aspects to anything thing submitted. No longer does someone say 'This and this I like but this needs work'. Oh no, now the response is 'Hate this, hate that, this is pointless.'. Hacker \u003cem\u003eNews\u003c/em\u003e now is about correcting grammar and points scoring. It is pointing out anything negative at all that anyone has done, has said. It is no longer a safe place. It has fast become an acidic forum.\u003cp\u003eI've launched 2 projects (11kclub and Favilous) on here over the last year - both got a similar response. There was nothing constructive, it was just sniping - they saw someone had put themselves up there and they just shot them down. It's a real shame. I hope one day the site returns with the kind of audience it once had. Until that happens, I won't be going on my favourite site anymore - the commute just got a whole lot longer.\u003cp\u003eFor now I wish you all the best...\u003cp\u003eThanks\u003cp\u003eSteve","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]}}},{"created_at":"2018-02-22T15:04:14.000Z","title":"Hacker News's Undocumented Features and Behaviors","url":"https://github.com/minimaxir/hacker-news-undocumented","author":"minimaxir","points":803,"story_text":null,"comment_text":null,"num_comments":391,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1519311854,"_tags":["story","author_minimaxir","story_16437973"],"objectID":"16437973","_highlightResult":{"title":{"value":"Hacker \u003cem\u003eNews\u003c/em\u003e's Undocumented Features and Behaviors","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"https://github.com/minimaxir/hacker-\u003cem\u003enews\u003c/em\u003e-undocumented","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"author":{"value":"minimaxir","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-03-21T17:48:51.000Z","title":"Tell HN: I just wanted to say: thank you, Hacker News","url":null,"author":"d33d33","points":799,"story_text":"a few years ago i posted a question:\u003cp\u003eAsk HN: Chances for Restarting a Career in CS @ 30+ ?\n( https:\u0026#x2F;\u0026#x2F;news.ycombinator.com\u0026#x2F;item?id=7997624 )\u003cp\u003eafter reading all the answers and recommendations, i decided to study CS in 2015.\u003cp\u003eit was quite challenging in every sense: time\u0026#x2F;money management, high drop-out rates (~80% fail or stop studying cs at my university), lack of math skills - school was far far away.\u003cp\u003enow, i finished it and i can say, i definitely don\u0026#x27;t regret it. it sharpened my mind and changed my mindset in a positive way. i\u0026#x27;ve got absolutely no problems finding job offers (mainly as consultat or junior software engineers (i.e. IBM)) although i am now in my mid-thirties.\u003cp\u003ethank you, hn community","comment_text":null,"num_comments":131,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1521654531,"_tags":["story","author_d33d33","story_16640599"],"objectID":"16640599","_highlightResult":{"title":{"value":"Tell HN: I just wanted to say: thank you, Hacker \u003cem\u003eNews\u003c/em\u003e","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"author":{"value":"d33d33","matchLevel":"none","matchedWords":[]},"story_text":{"value":"a few years ago i posted a question:\u003cp\u003eAsk HN: Chances for Restarting a Career in CS @ 30+ ?\n( https://\u003cem\u003enews\u003c/em\u003e.ycombinator.com/item?id=7997624 )\u003cp\u003eafter reading all the answers and recommendations, i decided to study CS in 2015.\u003cp\u003eit was quite challenging in every sense: time/money management, high drop-out rates (~80% fail or stop studying cs at my university), lack of math skills - school was far far away.\u003cp\u003enow, i finished it and i can say, i definitely don't regret it. it sharpened my mind and changed my mindset in a positive way. i've got absolutely no problems finding job offers (mainly as consultat or junior software engineers (i.e. IBM)) although i am now in my mid-thirties.\u003cp\u003ethank you, hn community","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]}}},{"created_at":"2017-04-06T12:20:41.000Z","title":"A Thank-You Note to the Hacker News Community from Ubuntu","url":"http://blog.dustinkirkland.com/2017/04/thank-you-note-to-hackernews.html","author":"dustinkirkland","points":786,"story_text":null,"comment_text":null,"num_comments":227,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1491481241,"_tags":["story","author_dustinkirkland","story_14049868"],"objectID":"14049868","_highlightResult":{"title":{"value":"A Thank-You Note to the Hacker \u003cem\u003eNews\u003c/em\u003e Community from Ubuntu","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"http://blog.dustinkirkland.com/2017/04/thank-you-note-to-hackernews.html","matchLevel":"none","matchedWords":[]},"author":{"value":"dustinkirkland","matchLevel":"none","matchedWords":[]}}},{"created_at":"2019-01-03T16:40:26.000Z","title":"Show HN: HN.Academy – Top online courses recommended by Hacker News users","url":"https://hn.academy","author":"yaj54","points":773,"story_text":null,"comment_text":null,"num_comments":85,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1546533626,"_tags":["story","author_yaj54","story_18816418","show_hn"],"objectID":"18816418","_highlightResult":{"title":{"value":"Show HN: HN.Academy – Top online courses recommended by Hacker \u003cem\u003eNews\u003c/em\u003e users","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"https://hn.academy","matchLevel":"none","matchedWords":[]},"author":{"value":"yaj54","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-04-03T20:47:38.000Z","title":"Mexican Newspaper Shuts Down, Saying It Is Too Dangerous to Continue","url":"https://www.nytimes.com/2017/04/03/world/americas/el-norte-closes-mexican-newspaper.html","author":"schoen","points":769,"story_text":null,"comment_text":null,"num_comments":407,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1491252458,"_tags":["story","author_schoen","story_14026984"],"objectID":"14026984","_highlightResult":{"title":{"value":"Mexican \u003cem\u003eNews\u003c/em\u003epaper Shuts Down, Saying It Is Too Dangerous to Continue","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"https://www.nytimes.com/2017/04/03/world/americas/el-norte-closes-mexican-\u003cem\u003enews\u003c/em\u003epaper.html","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"author":{"value":"schoen","matchLevel":"none","matchedWords":[]}}},{"created_at":"2014-12-15T19:59:34.000Z","title":"Good News You May Have Missed in 2014","url":"http://www.gatesnotes.com/About-Bill-Gates/Year-in-Review-2014","author":"prajjwal","points":656,"story_text":null,"comment_text":null,"num_comments":114,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1418673574,"_tags":["story","author_prajjwal","story_8754036"],"objectID":"8754036","_highlightResult":{"title":{"value":"Good \u003cem\u003eNews\u003c/em\u003e You May Have Missed in 2014","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"http://www.gatesnotes.com/About-Bill-Gates/Year-in-Review-2014","matchLevel":"none","matchedWords":[]},"author":{"value":"prajjwal","matchLevel":"none","matchedWords":[]}}},{"created_at":"2015-06-17T08:20:42.000Z","title":"DuckDuckGo on CNBC: We’ve grown 600% since NSA surveillance news broke","url":"http://technical.ly/philly/2015/06/16/duckduckgo-cnbc/","author":"wnm","points":636,"story_text":null,"comment_text":null,"num_comments":244,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1434529242,"_tags":["story","author_wnm","story_9730570"],"objectID":"9730570","_highlightResult":{"title":{"value":"DuckDuckGo on CNBC: We’ve grown 600% since NSA surveillance \u003cem\u003enews\u003c/em\u003e broke","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"http://technical.ly/philly/2015/06/16/duckduckgo-cnbc/","matchLevel":"none","matchedWords":[]},"author":{"value":"wnm","matchLevel":"none","matchedWords":[]}}},{"created_at":"2016-11-16T22:29:48.000Z","title":"Snowden: Stop Relying on Facebook for Your News","url":"http://www.scribblrs.com/snowden-stop-relying-facebook-news/","author":"spacehacker","points":626,"story_text":null,"comment_text":null,"num_comments":326,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1479335388,"_tags":["story","author_spacehacker","story_12972219"],"objectID":"12972219","_highlightResult":{"title":{"value":"Snowden: Stop Relying on Facebook for Your \u003cem\u003eNews\u003c/em\u003e","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"http://www.scribblrs.com/snowden-stop-relying-facebook-\u003cem\u003enews\u003c/em\u003e/","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"author":{"value":"spacehacker","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-03-01T00:20:56.000Z","title":"Satirical Summaries of Hacker News","url":"http://n-gate.com/hackernews/","author":"yumaikas","points":626,"story_text":null,"comment_text":null,"num_comments":138,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1488327656,"_tags":["story","author_yumaikas","story_13759706"],"objectID":"13759706","_highlightResult":{"title":{"value":"Satirical Summaries of Hacker \u003cem\u003eNews\u003c/em\u003e","matchLevel":"full","fullyHighlighted":false,"matchedWords":["news"]},"url":{"value":"http://n-gate.com/hackernews/","matchLevel":"none","matchedWords":[]},"author":{"value":"yumaikas","matchLevel":"none","matchedWords":[]}}}],"nbHits":573848,"page":0,"nbPages":50,"hitsPerPage":20,"processingTimeMS":2,"exhaustiveNbHits":false,"query":"news","params":"advancedSyntax=true\u0026analytics=false\u0026query=news"}
//     }
//   render() {
//     return (
//       <div>
        
//       </div>
//     )
//   }
// }

// const mapStateToProps = (state) => ({
  
// })

// const mapDispatchToProps = {
  
// }

// export default connect(mapStateToProps, mapDispatchToProps)(text)


